// Generated by parseopenapi version: 0ce237482a Mon Jun 5 17:17:17 2023 +0300
package main

import (
	"context"
	"errors"
	"fmt"

	"github.com/davidsteed/cognito/lib/logs"
	"github.com/getkin/kin-openapi/openapi3filter"
	"github.com/labstack/echo/v4"
	middleware "github.com/oapi-codegen/echo-middleware"
	"go.uber.org/zap"

	Openapi "github.com/davidsteed/cognito/api"
)

type Server struct {
	Server *echo.Echo
}

func NewServer(e *echo.Echo) *Server {
	s := Server{
		Server: e,
	}

	swagger, err := Openapi.GetSwagger()
	if err != nil {
		logs.Log.Fatal("error loading swagger spec", zap.Error(err))
	}
	// Clear out the servers array in the swagger spec, that skips validating
	// that server names match. We don't know how this thing will be run.
	swagger.Servers = nil
	validatorOptions := &middleware.Options{}

	validatorOptions.Options.AuthenticationFunc = func(c context.Context, input *openapi3filter.AuthenticationInput) error {
		// Check Authorization
		if input.SecuritySchemeName != "cognito" { // Should be using simulator authorisation
			return errors.New("invalid Authentication Schema")
		}
		return nil
	}

	e.Use(middleware.OapiRequestValidatorWithOptions(swagger, validatorOptions))

	Openapi.RegisterHandlers(e, &s)
	return &s
}

func (s *Server) Start() error {
	if err := s.Server.Start(fmt.Sprintf(":%d", Settings.LocalPort)); err != nil {
		return fmt.Errorf("server failure: %w", err)
	}
	return nil
}
