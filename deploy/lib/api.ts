import {
  aws_apigateway as apigateway,
  aws_lambda as lambda,
  aws_iam as iam,
  aws_route53_targets as targets,
  Duration,
  Stack,
  StackProps,
} from "aws-cdk-lib";
import { ARecord, HostedZone, RecordTarget } from "aws-cdk-lib/aws-route53";
import { ICertificate } from "aws-cdk-lib/aws-certificatemanager";
import { Construct } from "constructs";
import path from "path";

export interface ApiStackProps extends StackProps {
  readonly zoneName: string;
  readonly zoneId: string;
  readonly userPoolId: string;
  readonly apiCertificate: ICertificate;
}

export class DemoAPI extends Stack {
  constructor(scope: Construct, id: string, props: ApiStackProps) {
    super(scope, id, props);

    const role = new iam.Role(this, `${id}-lambda-role`, {
      assumedBy: new iam.ServicePrincipal("lambda.amazonaws.com"),
      managedPolicies: [
        iam.ManagedPolicy.fromAwsManagedPolicyName(
          "service-role/AWSLambdaBasicExecutionRole",
        ),
      ],
    });

    const apiLambda = new lambda.Function(this, `${id}-lambda`, {
      timeout: Duration.seconds(60),
      role,
      memorySize: 256,
      code: lambda.Code.fromAsset(path.join(__dirname, "../../build")),
      handler: "bootstrap",
      runtime: lambda.Runtime.PROVIDED_AL2,
      architecture: lambda.Architecture.ARM_64,
    });
    apiLambda.grantInvoke(new iam.ServicePrincipal("apigateway.amazonaws.com"));

    const corsOptions: apigateway.CorsOptions = {
      allowOrigins: [`https://www.${props.zoneName}`, "http://localhost:3000"],
      allowHeaders: ["x-correlation-id", "authorization", "Content-Type"],
    };

    const api = new apigateway.LambdaRestApi(this, id, {
      restApiName: id,
      handler: apiLambda,
      proxy: false,
      defaultCorsPreflightOptions: corsOptions,
      endpointConfiguration: {
        types: [apigateway.EndpointType.REGIONAL],
      },
    });

    const zone = HostedZone.fromHostedZoneAttributes(this, `${id}-HostedZone`, {
      hostedZoneId: props.zoneId,
      zoneName: props.zoneName,
    });

    const domain = new apigateway.DomainName(this, `${id}-api-domain`, {
      domainName: `api.${props.zoneName}`,
      certificate: props.apiCertificate,
      endpointType: apigateway.EndpointType.REGIONAL,
      securityPolicy: apigateway.SecurityPolicy.TLS_1_2,
    });

    new ARecord(this, `${id}-aliasRecord`, {
      zone,
      recordName: "api",
      target: RecordTarget.fromAlias(new targets.ApiGatewayDomain(domain)),
    });

    new apigateway.BasePathMapping(this, `${id}-base-path-mapping`, {
      basePath: id,
      restApi: api,
      domainName: domain,
    });

    const authRole = new iam.Role(this, `${id}-auth-lambda-role`, {
      assumedBy: new iam.ServicePrincipal("apigateway.amazonaws.com"),
      managedPolicies: [
        iam.ManagedPolicy.fromAwsManagedPolicyName(
          "service-role/AWSLambdaBasicExecutionRole",
        ),
      ],
    });

    authRole.addToPolicy(
      new iam.PolicyStatement({
        actions: ["sts:AssumeRole", "lambda:InvokeFunction"],
        resources: ["*"],
        effect: iam.Effect.ALLOW,
      }),
    );

    const cognitoUserPoolArn = `arn:aws:cognito-idp:${this.region}:${this.account}:userpool/${props.userPoolId}`;

    const authoriser = new apigateway.CfnAuthorizer(this, `${id}-api-auth`, {
      restApiId: api.restApiId,
      type: apigateway.AuthorizationType.COGNITO,
      providerArns: [cognitoUserPoolArn],
      name: props.userPoolId,
      identitySource: "method.request.header.Authorization",
    });

    const apiIntegration = new apigateway.LambdaIntegration(apiLambda);

    const authoriserOptions = {
      authorizationType: apigateway.AuthorizationType.COGNITO,
      authorizer: { authorizerId: authoriser.ref },
    };

    // The code below is autogenerated by create-endpoints.  To regenerate replace with AddMethod in curly braces and
    // run make endpoints

    // Get Fad Details
    const v1 = api.root.addResource("v1");
    const v1Location = v1.addResource("location");
    v1Location.addMethod("GET", apiIntegration, authoriserOptions);

    v1Location.addMethod("POST", apiIntegration, authoriserOptions);

    // End Autogenerated code
  }
}
