/**
 * Generated by orval v6.19.1 🍺
 * Do not edit manually.
 * Cadence Demo
 * Test Event Bus
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { Location } from "../model";
import { customInstance } from "../mutator/customInstance";
import type { ErrorType } from "../mutator/customInstance";

/**
 * Returns Locations
 */
export const getLocation = (signal?: AbortSignal) => {
  return customInstance<Location[]>({
    url: `/v1/location`,
    method: "get",
    signal,
  });
};

export const getGetLocationQueryKey = () => {
  return [`/v1/location`] as const;
};

export const getGetLocationQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocation>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLocation>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLocationQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocation>>> = ({
    signal,
  }) => getLocation(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocation>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetLocationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocation>>
>;
export type GetLocationQueryError = ErrorType<unknown>;

export const useGetLocation = <
  TData = Awaited<ReturnType<typeof getLocation>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLocation>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLocationQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Updates Location
 */
export const postLocation = (location: Location) => {
  return customInstance<void>({
    url: `/v1/location`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: location,
  });
};

export const getPostLocationMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLocation>>,
    TError,
    { data: Location },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLocation>>,
  TError,
  { data: Location },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLocation>>,
    { data: Location }
  > = (props) => {
    const { data } = props ?? {};

    return postLocation(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLocationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLocation>>
>;
export type PostLocationMutationBody = Location;
export type PostLocationMutationError = ErrorType<unknown>;

export const usePostLocation = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLocation>>,
    TError,
    { data: Location },
    TContext
  >;
}) => {
  const mutationOptions = getPostLocationMutationOptions(options);

  return useMutation(mutationOptions);
};
