/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * Cadence Demo
 * Test Event Bus
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type { Location } from "../model";

import { customMutator } from "../mutator/customInstance";
import type { ErrorType } from "../mutator/customInstance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Returns Locations
 */
export const getLocation = (
  options?: SecondParameter<typeof customMutator>,
  signal?: AbortSignal,
) => {
  return customMutator<Location[]>(
    { url: `/v1/location`, method: "GET", signal },
    options,
  );
};

export const getGetLocationQueryKey = () => {
  return [`/v1/location`] as const;
};

export const getGetLocationQueryOptions = <
  TData = Awaited<ReturnType<typeof getLocation>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLocation>>, TError, TData>
  >;
  request?: SecondParameter<typeof customMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLocationQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLocation>>> = ({
    signal,
  }) => getLocation(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLocation>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetLocationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLocation>>
>;
export type GetLocationQueryError = ErrorType<unknown>;

export function useGetLocation<
  TData = Awaited<ReturnType<typeof getLocation>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLocation>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getLocation>>,
        TError,
        Awaited<ReturnType<typeof getLocation>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customMutator>;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLocation<
  TData = Awaited<ReturnType<typeof getLocation>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLocation>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getLocation>>,
        TError,
        Awaited<ReturnType<typeof getLocation>>
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof customMutator>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetLocation<
  TData = Awaited<ReturnType<typeof getLocation>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLocation>>, TError, TData>
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetLocation<
  TData = Awaited<ReturnType<typeof getLocation>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLocation>>, TError, TData>
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetLocationQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Updates Location
 */
export const postLocation = (
  location: Location,
  options?: SecondParameter<typeof customMutator>,
  signal?: AbortSignal,
) => {
  return customMutator<void>(
    {
      url: `/v1/location`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: location,
      signal,
    },
    options,
  );
};

export const getPostLocationMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLocation>>,
    TError,
    { data: Location },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLocation>>,
  TError,
  { data: Location },
  TContext
> => {
  const mutationKey = ["postLocation"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLocation>>,
    { data: Location }
  > = (props) => {
    const { data } = props ?? {};

    return postLocation(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLocationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLocation>>
>;
export type PostLocationMutationBody = Location;
export type PostLocationMutationError = ErrorType<unknown>;

export const usePostLocation = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLocation>>,
    TError,
    { data: Location },
    TContext
  >;
  request?: SecondParameter<typeof customMutator>;
}): UseMutationResult<
  Awaited<ReturnType<typeof postLocation>>,
  TError,
  { data: Location },
  TContext
> => {
  const mutationOptions = getPostLocationMutationOptions(options);

  return useMutation(mutationOptions);
};
